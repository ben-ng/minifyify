{
  "name": "gcc",
  "description": "Node wrapper for Google Closure Compiler.",
  "version": "1.0.0",
  "homepage": "https://github.com/Darsain/node-gcc",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Darsain/node-gcc.git"
  },
  "bugs": {
    "url": "https://github.com/Darsain/node-gcc/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "lib/gcc.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-tagrelease": "~0.2.0",
    "grunt-bumpup": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "minify",
    "compile",
    "compress",
    "closure-compiler",
    "gcc"
  ],
  "readme": "# gcc\n\nNode wrapper for Google Closure Compiler.\n\n### [Changelog](https://github.com/Darsain/node-gcc/wiki/Changelog)\n\nGCC upholds the [Semantic Versioning Specification](http://semver.org/).\n\n## Installation\n\n```\nnpm install gcc\n```\n\n## Usage\n\n```js\nvar compiler = require('gcc');\nvar source = ['file.js', 'file2.js'];\nvar destination = 'result.js';\nvar options = { compilation_level: 'WHITESPACE_ONLY' };\nvar callback = function (error, stdout, stderr) {\n\tif (error) {\n\t\tconsole.error(error);\n\t} else {\n\t\tconsole.log('Compiled size: ' + stdout.length + 'bytes');\n\t}\n};\n\ncompiler.compile(source, destination, options, callback);\n```\n\n## API\n\nAssuming:\n\n```js\nvar compiler = require('gcc');\n```\n\n### compiler.java\n\nString specifying java command. Default: `java`\n\nIf `java` is not exposed globally in system `PATH`, set the destination to it here.\n\n### compiler.defaults\n\nOptions for closure compiler that will be used in every `compile()` call unless overridden by `options`\nargument. Contains:\n\n```js\n{\n\tcompilation_level: 'SIMPLE_OPTIMIZATIONS'\n}\n```\n\n### compiler.compile()\n\nFunction that does the compiling. Arguments:\n\n```js\ncompiler.compile(source [, destination ] [, options ] [, callback ]);\n```\n\n- **source** `Mixed` : Path, or an array of paths to JavaScript files that should be concatenated and minified.\n- **destination** `String` : When specified, output will be saved to this path.\n- **options** `Object` : Object with Closure Compiler options. Extends `compiler.defaults`.\n- **callback** `Function` : When specified, will be executed at the end of the compiling process. Accepts 3 arguments:\n\t`error` which is `null` when no errors occurred, `stdout` containing the minified code, and `stderr` containing\n\tthe error output.\n\n#### Return\n\nReturns the compiling process with `stdout` and `stderr` streams.\n\n## Examples\n\nCompile `example.js` into `example.min.js` with `WHITESPACE_ONLY` compilation level.\n\n```js\ncompiler.compile('example.js', 'example.min.js', { compilation_level: 'WHITESPACE_ONLY' });\n```\n\nCompile `example1.js` and `example2.js` with default options, and handle the output in callback.\n\n```js\ncompiler.compile(['example1.js', 'example2.js'], function (error, stdout, stderr) {\n\tif (error) {\n\t\tconsole.log(error);\n\t} else {\n\t\tconsole.log('Minified size: ' + stdout.length + 'bytes');\n\t}\n});\n```\n\nCompile `example1.js` and `example2.js` with custom options, and handle the compiling process manually.\n\n```js\nvar compiling = compiler.compile(['example1.js', 'example2.js'], { compilation_level: 'WHITESPACE_ONLY' });\n\ncompiling.stdout.on('data', function (data) {\n\tconsole.log('stdout: ' + data);\n});\n\ncompiling.stderr.on('data', function (data) {\n\tconsole.log('stderr: ' + data);\n});\n\ncompiling.on('close', function (code) {\n\tconsole.log('Compiling process has finished with exit code: ' + code);\n});\n```\n\n## Closure Compiler options\n\nAll options are passed as keys in an options object.\n\nIf an option is a flag with no input value, pass `true` as an option value:\n\n```js\ncompiler.compile('example.js', 'result.js', {\n\tdebug: true\n});\n```\n\nIf an option accepts multiple values, pass them as an array to option value:\n\n```js\ncompiler.compile('example.js', 'result.js', {\n\tcompilation_level: 'ADVANCED_OPTIMIZATIONS',\n\texterns: [\n\t\t'jquery.js',\n\t\t'underscore.js'\n\t]\n});\n```\n\n---\n\n### compilation_level:\n\n- `WHITESPACE_ONLY` : Removes comments, line breaks, unnecessary spaces, and other whitespace.\n- `SIMPLE_OPTIMIZATIONS` : ^ plus shortens local variables, function names, and function parameters.\n- `ADVANCED_OPTIMIZATIONS` : ^ but also for **global** variables, function names, and function parameters.\n\nFor more specific explanation, visit the [Closure Compiler Compilation Levels documentation](https://developers.google.com/closure/compiler/docs/compilation_levels).\n\n---\n\n#### Rest of the Closure Compiler options as defined in --help\n\n**Note:** Option `js_output_file` is ignored because when specified, compiler binary doesn't return `stdout/err`, but\nonly writes to the file which breaks callback arguments. Use the `compiler()` `destination` argument instead please. The\ndestination file is saved with fs writing stream consuming the `stdout`.\n\n```\n --accept_const_keyword                 : Allows usage of const keyword.\n --angular_pass                         : Generate $inject properties for\n                                          AngularJS for functions annotated\n                                          with @ngInject\n --charset VAL                          : Input and output charset for all\n                                          files. By default, we accept UTF-8 as\n                                          input and output US_ASCII\n --closure_entry_point VAL              : Entry points to the program. Must be\n                                          goog.provide'd symbols. Any goog.provi\n                                          de'd symbols that are not a transitive\n                                          dependency of the entry points will\n                                          be removed. Files without goog.provide\n                                          s, and their dependencies, will\n                                          always be left in. If any entry\n                                          points are specified, then the\n                                          manage_closure_dependencies option\n                                          will be set to true and all files\n                                          will be sorted in dependency order.\n --common_js_entry_module VAL           : Root of your common JS dependency\n                                          hierarchy. Your main script.\n --common_js_module_path_prefix VAL     : Path prefix to be removed from\n                                          CommonJS module names.\n --compilation_level [WHITESPACE_ONLY   : Specifies the compilation level to\n | SIMPLE_OPTIMIZATIONS | ADVANCED_OPTI : use. Options: WHITESPACE_ONLY,\n MIZATIONS]                             : SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZ\n                                          ATIONS\n --create_name_map_files                : If true, variable renaming and\n                                          property renaming map files will be\n                                          produced as {binary name}_vars_map.out\n                                          and {binary name}_props_map.out. Note\n                                          that this flag cannot be used in\n                                          conjunction with either variableMapOut\n                                          putFile or property_map_output_file\n --create_source_map VAL                : If specified, a source map file\n                                          mapping the generated source files\n                                          back to the original source file will\n                                          be output to the specified path. The\n                                          %outname% placeholder will expand to\n                                          the name of the output file that the\n                                          source map corresponds to.\n --debug                                : Enable debugging options\n --define (--D, -D) VAL                 : Override the value of a variable\n                                          annotated @define. The format is\n                                          <name>[=<val>], where <name> is the\n                                          name of a @define variable and <val>\n                                          is a boolean, number, or a single-quot\n                                          ed string that contains no single\n                                          quotes. If [=<val>] is omitted, the\n                                          variable is marked true\n --externs VAL                          : The file containing JavaScript\n                                          externs. You may specify multiple\n --extra_annotation_name VAL            : A whitelist of tag names in JSDoc.\n                                          You may specify multiple\n --flagfile VAL                         : A file containing additional command-l\n                                          ine options.\n --formatting [PRETTY_PRINT | PRINT_INP : Specifies which formatting options,\n UT_DELIMITER | SINGLE_QUOTES]          : if any, should be applied to the\n                                          output JS. Options: PRETTY_PRINT,\n                                          PRINT_INPUT_DELIMITER, SINGLE_QUOTES\n --generate_exports                     : Generates export code for those\n                                          marked with @export\n --help                                 : Displays this message\n --js VAL                               : The JavaScript filename. You may\n                                          specify multiple\n --js_output_file VAL                   : Primary output filename. If not\n                                          specified, output is written to stdout\n --jscomp_error VAL                     : Make the named class of warnings an\n                                          error. Options:accessControls,\n                                          ambiguousFunctionDecl, checkRegExp,\n                                          checkStructDictInheritance, checkTypes\n                                          , checkVars, const, constantProperty,\n                                          deprecated, duplicateMessage,\n                                          es5Strict, externsValidation,\n                                          fileoverviewTags, globalThis,\n                                          internetExplorerChecks, invalidCasts,\n                                          misplacedTypeAnnotation, missingProper\n                                          ties, missingReturn,nonStandardJsDocs,\n                                          reportUnknownTypes, suspiciousCode,\n                                          strictModuleDepCheck, typeInvalidation\n                                          , undefinedNames, undefinedVars,\n                                          unknownDefines, uselessCode, visibilit\n                                          y\n --jscomp_off VAL                       : Turn off the named class of warnings.\n                                          Options:accessControls, ambiguousFunct\n                                          ionDecl, checkRegExp, checkStructDictI\n                                          nheritance, checkTypes, checkVars,\n                                          const, constantProperty, deprecated,\n                                          duplicateMessage, es5Strict, externsVa\n                                          lidation, fileoverviewTags, globalThis\n                                          , internetExplorerChecks, invalidCasts\n                                          , misplacedTypeAnnotation, missingProp\n                                          erties, missingReturn,nonStandardJsDoc\n                                          s, reportUnknownTypes, suspiciousCode,\n                                          strictModuleDepCheck, typeInvalidation\n                                          , undefinedNames, undefinedVars,\n                                          unknownDefines, uselessCode, visibilit\n                                          y\n --jscomp_warning VAL                   : Make the named class of warnings a\n                                          normal warning. Options:accessControls\n                                          , ambiguousFunctionDecl, checkRegExp,\n                                          checkStructDictInheritance, checkTypes\n                                          , checkVars, const, constantProperty,\n                                          deprecated, duplicateMessage,\n                                          es5Strict, externsValidation,\n                                          fileoverviewTags, globalThis,\n                                          internetExplorerChecks, invalidCasts,\n                                          misplacedTypeAnnotation, missingProper\n                                          ties, missingReturn,nonStandardJsDocs,\n                                          reportUnknownTypes, suspiciousCode,\n                                          strictModuleDepCheck, typeInvalidation\n                                          , undefinedNames, undefinedVars,\n                                          unknownDefines, uselessCode, visibilit\n                                          y\n --language_in VAL                      : Sets what language spec that input\n                                          sources conform. Options: ECMASCRIPT3\n                                          (default), ECMASCRIPT5, ECMASCRIPT5_ST\n                                          RICT\n --logging_level VAL                    : The logging level (standard java.util.\n                                          logging.Level values) for Compiler\n                                          progress. Does not control errors or\n                                          warnings for the JavaScript code\n                                          under compilation\n --manage_closure_dependencies          : Automatically sort dependencies so\n                                          that a file that goog.provides symbol\n                                          X will always come before a file that\n                                          goog.requires symbol X. If an input\n                                          provides symbols, and those symbols\n                                          are never required, then that input\n                                          will not be included in the compilatio\n                                          n.\n --module VAL                           : A JavaScript module specification.\n                                          The format is <name>:<num-js-files>[:[\n                                          <dep>,...][:]]]. Module names must be\n                                          unique. Each dep is the name of a\n                                          module that this module depends on.\n                                          Modules must be listed in dependency\n                                          order, and JS source files must be\n                                          listed in the corresponding order.\n                                          Where --module flags occur in\n                                          relation to --js flags is unimportant.\n                                          Provide the value 'auto' to trigger\n                                          module creation from CommonJSmodules.\n --module_output_path_prefix VAL        : Prefix for filenames of compiled JS\n                                          modules. <module-name>.js will be\n                                          appended to this prefix. Directories\n                                          will be created as needed. Use with\n                                          --module\n --module_wrapper VAL                   : An output wrapper for a JavaScript\n                                          module (optional). The format is\n                                          <name>:<wrapper>. The module name\n                                          must correspond with a module\n                                          specified using --module. The wrapper\n                                          must contain %s as the code placeholde\n                                          r. The %basename% placeholder can\n                                          also be used to substitute the base\n                                          name of the module output file.\n --only_closure_dependencies            : Only include files in the transitive\n                                          dependency of the entry points\n                                          (specified by closure_entry_point).\n                                          Files that do not provide dependencies\n                                          will be removed. This supersedesmanage\n                                          _closure_dependencies\n --output_manifest VAL                  : Prints out a list of all the files in\n                                          the compilation. If --manage_closure_d\n                                          ependencies is on, this will not\n                                          include files that got dropped\n                                          because they were not required. The\n                                          %outname% placeholder expands to the\n                                          JS output file. If you're using\n                                          modularization, using %outname% will\n                                          create a manifest for each module.\n --output_module_dependencies VAL       : Prints out a JSON file of dependencies\n                                          between modules.\n --output_wrapper VAL                   : Interpolate output into this string\n                                          at the place denoted by the marker\n                                          token %output%. Use marker token\n                                          %output|jsstring% to do js string\n                                          escaping on the output.\n --print_ast                            : Prints a dot file describing the\n                                          internal abstract syntax tree and\n                                          exits\n --print_pass_graph                     : Prints a dot file describing the\n                                          passes that will get run and exits\n --print_tree                           : Prints out the parse tree and exits\n --process_closure_primitives           : Processes built-ins from the Closure\n                                          library, such as goog.require(),\n                                          goog.provide(), and goog.exportSymbol(\n                                          )\n --process_common_js_modules            : Process CommonJS modules to a\n                                          concatenable form.\n --process_jquery_primitives            : Processes built-ins from the Jquery\n                                          library, such as jQuery.fn and\n                                          jQuery.extend()\n --property_map_input_file VAL          : File containing the serialized\n                                          version of the property renaming map\n                                          produced by a previous compilation\n --property_map_output_file VAL         : File where the serialized version of\n                                          the property renaming map produced\n                                          should be saved\n --source_map_format [V1 | DEFAULT |    : The source map format to produce.\n V2 | V3]                               : Options: V1, V2, V3, DEFAULT. DEFAULT\n                                          produces V2.\n --summary_detail_level N               : Controls how detailed the compilation\n                                          summary is. Values: 0 (never print\n                                          summary), 1 (print summary only if\n                                          there are errors or warnings), 2\n                                          (print summary if the 'checkTypes'\n                                          diagnostic  group is enabled, see\n                                          --jscomp_warning), 3 (always print\n                                          summary). The default level is 1\n --third_party                          : Check source validity but do not\n                                          enforce Closure style rules and\n                                          conventions\n --transform_amd_modules                : Transform AMD to CommonJS modules.\n --translations_file VAL                : Source of translated messages.\n                                          Currently only supports XTB.\n --translations_project VAL             : Scopes all translations to the\n                                          specified project.When specified, we\n                                          will use different message ids so\n                                          that messages in different projects\n                                          can have different translations.\n --use_only_custom_externs              : Specifies whether the default externs\n                                          should be excluded\n --use_types_for_optimization           : Experimental: perform additional\n                                          optimizations based on available\n                                          information.  Inaccurate type\n                                          annotations may result in incorrect\n                                          results.\n --variable_map_input_file VAL          : File containing the serialized\n                                          version of the variable renaming map\n                                          produced by a previous compilation\n --variable_map_output_file VAL         : File where the serialized version of\n                                          the variable renaming map produced\n                                          should be saved\n --version                              : Prints the compiler version to stderr.\n --warning_level [QUIET | DEFAULT |     : Specifies the warning level to use.\n VERBOSE]                               : Options: QUIET, DEFAULT, VERBOSE\n --warnings_whitelist_file VAL          : A file containing warnings to\n                                          suppress. Each line should be of the\n                                          form\n                                          <file-name>:<line-number>?  <warning-d\n                                          escription>\n```",
  "readmeFilename": "README.md",
  "_id": "gcc@1.0.0",
  "dist": {
    "shasum": "e79f4a2fabb9fe5be913d351752dd59c7200cc02"
  },
  "_from": "gcc@1.0.x",
  "_resolved": "https://registry.npmjs.org/gcc/-/gcc-1.0.0.tgz"
}
